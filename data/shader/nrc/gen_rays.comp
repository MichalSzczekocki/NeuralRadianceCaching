#version 460
#include "common.glsl"

#define TRUE_TRACE_SAMPLE_COUNT 32
vec4 TracePath(const vec3 rayOrigin, const vec3 rayDir)
{
    vec3 scatteredLight = vec3(0.0);
    float transmittance = 1.0;

    const vec3 entry = find_entry_exit(rayOrigin, rayDir)[0];

    vec3 currentPoint = entry;
    vec3 lastPoint = entry;

    vec3 currentDir = rayDir;
    vec3 lastDir = vec3(0.0);

    float totalTermProb = 1.0;

    for (uint i = 0; i < TRUE_TRACE_SAMPLE_COUNT; i++)
    {
        const float density = getDensity(currentPoint);

        if (density > 0.0)
        {
            // Get scene lighting
            const vec3 sceneLighting = TraceScene(currentPoint, currentDir);

            // Phase factor
            const float phase = 1.0; // Importance sampling

            // Transmittance calculation
            const vec3 s_int = density * sceneLighting * phase;
            const float t_r = GetTransmittance(currentPoint, lastPoint, 32);

            scatteredLight += transmittance * s_int;
            transmittance *= t_r;

            // Update last
            lastPoint = currentPoint;
            lastDir = currentDir;

            // Generate new direction
            currentDir = NewRayDir(currentDir);
        }

        // Generate new point
        const vec3 exit = find_entry_exit(currentPoint, currentDir)[1];
        const float maxDistance = distance(exit, currentPoint) * 0.1;
        const float nextDistance = RandFloat(maxDistance);
        currentPoint = currentPoint + (currentDir * nextDistance);
    }

    return vec4(scatteredLight, transmittance);
}

void main()
{
    const uint x = gl_GlobalInvocationID.x;
    const uint y = gl_GlobalInvocationID.y;

    // Fraguv and world pos
    const vec2 fragUV = vec2(float(x) * ONE_OVER_RENDER_WIDTH, float(y) * ONE_OVER_RENDER_HEIGHT);
    const vec4 screenCoord = vec4((fragUV * 2.0) - vec2(1.0), 0.0, 1.0);
    const vec4 worldPos = camMat.invProjView * screenCoord;
    const vec3 pixelWorldPos = worldPos.xyz / worldPos.w;

    // Setup random
    preRand = volumeData.random.x * fragUV.x;
    prePreRand = volumeData.random.y * fragUV.y;

    // Setup ray
    const vec3 ro = camera.pos;
    vec3 rd = normalize(pixelWorldPos - ro);

    // SDF
    const vec3[2] entry_exit = find_entry_exit(ro, rd);
    const vec3 entry = entry_exit[0];
    const vec3 exit = entry_exit[1];

    if (sky_sdf(entry) > MAX_RAY_DISTANCE)
    {
        rd = -normalize(ro);
    }

    // Trace path
    const vec4 color = TracePath(ro, rd);
    imageStore(nrcPrimaryRayImage, ivec2(x, y), color);
}
