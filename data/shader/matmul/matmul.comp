#version 450

layout(set = 0, binding = 0) readonly buffer Config
{
    uint aRowCount;
    uint aColCount;
    uint bRowCount;
    uint bColCount;
} config;

layout(set = 0, binding = 1) writeonly buffer MatrixA
{
    float data[];
} matrixA;

layout(set = 0, binding = 2) readonly buffer MatrixB
{
    float data[];
} matrixB;

layout(set = 0, binding = 3) writeonly buffer MatrixC
{
    float data[];
} matrixC;

void main()
{
    // Get row / col / counts
    const uint outRow = gl_GlobalInvocationID.x;
    const uint outCol = gl_GlobalInvocationID.y;

    const uint outRowCount = config.aRowCount;
    const uint outColCount = config.bColCount;

    // ASSERT: matrixA.colCount == matrixB.rowCount;

    // Check row and col
    if (outRow >= outRowCount || outCol >= outColCount)
    return;

    // Matrix multiplication A * B
    float dotProduct = 0.0;

    for (uint i = 0; i < config.bRowCount; i++)
    {
        float leftVal = matrixA.data[outRow * config.aColCount + i];
        float rightVal = matrixB.data[i * config.bColCount + outCol];
        dotProduct += leftVal * rightVal;
    }

    matrixC.data[outRow * outColCount + outCol] = dotProduct;
}