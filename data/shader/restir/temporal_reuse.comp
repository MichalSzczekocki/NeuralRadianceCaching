#version 460
#define RESTIR
#include "common.glsl"

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

void ResampleTemporal(const ivec2 imageCoord, out int temporalIndex, out uint vertexIndex)
{
	vec4 restirStats = imageLoad(restirStatsImage, imageCoord);
	uint sampleStreamIndex = uint(restirStats.x);
	
	temporalIndex = -1;
	vertexIndex = 0;

	for (int t = 0; t < TEMPORAL_KERNEL_SIZE; t++)
	{
		for (uint v = 1; v < PATH_VERTEX_COUNT; v++)
		{
			const float prob = 1.0 / float(sampleStreamIndex);
			sampleStreamIndex++;

			if (RandFloat(1.0) < prob)
			{
				temporalIndex = t;
				vertexIndex = v;
			}
		}
	}
	
	restirStats.x = float(sampleStreamIndex);
	restirStats.y = float(vertexIndex);
	imageStore(restirStatsImage, imageCoord, restirStats);
}

void UpdateReservoir(int temporalIndex, const ivec2 imageCoord, const uint vertexIndex)
{
	if (frameCounter == 0)
	{
		return;
	}

	temporalIndex = min(temporalIndex, int(frameCounter - 1)) + 1;

	const uint lastFrameReservoirIndex = (frameCounter - temporalIndex) % TEMPORAL_KERNEL_SIZE;
	const uint currentFrameReservoirIndex = frameCounter % TEMPORAL_KERNEL_SIZE;

	// Move current local reservoir to old local reservoir
	for (uint v = 0; v < PATH_VERTEX_COUNT; v++)
	{
		vec3 vertexPos;
		vec3 vertexDir;
		LoadPathVertex(imageCoord, v, vertexPos, vertexDir);
		StoreOldPathVertex(currentFrameReservoirIndex, imageCoord, v, vertexPos, vertexDir);
	}

	// Update current local reservoir
	for (uint v = vertexIndex; v < PATH_VERTEX_COUNT; v++)
	{
		vec3 vertexPos;
		vec3 vertexDir;
		LoadOldPathVertex(lastFrameReservoirIndex, imageCoord, v, vertexPos, vertexDir);
		StorePathVertex(imageCoord, v, vertexPos, vertexDir);
	}
}

void main()
{
	const uint x = gl_GlobalInvocationID.x;
	const uint y = gl_GlobalInvocationID.y;
	const ivec2 imageCoord = ivec2(x, y);

	// Load and process informations from images
	const vec4 pixelInfo = imageLoad(pixelInfoImage, imageCoord);
	const bool didScatter = pixelInfo.w == 1.0;
	if (!didScatter)
	{
		return;
	}

	// Fraguv and world pos
	const vec2 fragUV = vec2(float(x) * ONE_OVER_RENDER_WIDTH, float(y) * ONE_OVER_RENDER_HEIGHT);

	// Setup random
	preRand = volumeData.random.x * fragUV.x;
	prePreRand = volumeData.random.y * fragUV.y;

	// Resample
	int temporalIndex;
	uint vertexIndex;

	ResampleTemporal(imageCoord, temporalIndex, vertexIndex);
	if (temporalIndex < 0)
	{
		return;
	}

	UpdateReservoir(temporalIndex, imageCoord, vertexIndex);
}
