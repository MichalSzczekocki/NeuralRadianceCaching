#version 460
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_atomic_float : enable

#include "common.glsl"

bool IsNanOrInf(float x)
{
	return isnan(x) || isinf(x) || abs(x) > 1000.0;
}

float ModifyDeltaWeight(float deltaWeight, const float weight)
{
	const float border = 1000.0;

	if (IsNanOrInf(deltaWeight))
	{
		deltaWeight = border * sign(deltaWeight);
	}

	// Weight decay
	deltaWeight += -weight * nrcConfig.weightDecay;

	return deltaWeight;
}

void StepWeights0(const uint index)
{
	if (index < 4096)
	{
		float weight = matWeights0[index];
		float deltaWeight =
		((1.0 - nrcConfig.beta1) * ModifyDeltaWeight(matDeltaWeights0[index], weight)) +
		(nrcConfig.beta1 * matMomentum1Weights0[index]);
		matMomentum1Weights0[index] = deltaWeight;
		matWeights0[index] += deltaWeight * nrcConfig.learningRate;

		if (IsNanOrInf(matWeights0[index]))
		{
			matWeights0[index] = 0.0;
		}
	}
}

void StepWeights1(const uint index)
{
	if (index < 4096)
	{
		float weight = matWeights1[index];
		float deltaWeight =
		((1.0 - nrcConfig.beta1) * ModifyDeltaWeight(matDeltaWeights1[index], weight)) +
		(nrcConfig.beta1 * matMomentum1Weights1[index]);
		matMomentum1Weights1[index] = deltaWeight;
		matWeights1[index] += deltaWeight * nrcConfig.learningRate;

		if (IsNanOrInf(matWeights1[index]))
		{
			matWeights1[index] = 0.0;
		}
	}
}

void StepWeights2(const uint index)
{
	if (index < 4096)
	{
		float weight = matWeights2[index];
		float deltaWeight =
		((1.0 - nrcConfig.beta1) * ModifyDeltaWeight(matDeltaWeights2[index], weight)) +
		(nrcConfig.beta1 * matMomentum1Weights2[index]);
		matMomentum1Weights2[index] = deltaWeight;
		matWeights2[index] += deltaWeight * nrcConfig.learningRate;

		if (IsNanOrInf(matWeights2[index]))
		{
			matWeights2[index] = 0.0;
		}
	}
}

void StepWeights3(const uint index)
{
	if (index < 4096)
	{
		float weight = matWeights3[index];
		float deltaWeight =
		((1.0 - nrcConfig.beta1) * ModifyDeltaWeight(matDeltaWeights3[index], weight)) +
		(nrcConfig.beta1 * matMomentum1Weights3[index]);
		matMomentum1Weights3[index] = deltaWeight;
		matWeights3[index] += deltaWeight * nrcConfig.learningRate;

		if (IsNanOrInf(matWeights3[index]))
		{
			matWeights3[index] = 0.0;
		}
	}
}

void StepWeights4(const uint index)
{
	if (index < 4096)
	{
		float weight = matWeights4[index];
		float deltaWeight =
		((1.0 - nrcConfig.beta1) * ModifyDeltaWeight(matDeltaWeights4[index], weight)) +
		(nrcConfig.beta1 * matMomentum1Weights4[index]);
		matMomentum1Weights4[index] = deltaWeight;
		matWeights4[index] += deltaWeight * nrcConfig.learningRate;

		if (IsNanOrInf(matWeights4[index]))
		{
			matWeights4[index] = 0.0;
		}
	}
}

void StepWeights5(const uint index)
{
	if (index < 192)
	{
		float weight = matWeights5[index];
		float deltaWeight =
		((1.0 - nrcConfig.beta1) * ModifyDeltaWeight(matDeltaWeights5[index], weight)) +
		(nrcConfig.beta1 * matMomentum1Weights5[index]);
		matMomentum1Weights5[index] = deltaWeight;
		matWeights5[index] += deltaWeight * nrcConfig.learningRate;

		if (IsNanOrInf(matWeights5[index]))
		{
			matWeights5[index] = 0.0;
		}
	}
}

void StepBiases(const uint index)
{
	//const float beta1 = 0.0;
	const float beta1 = nrcConfig.beta1;

	if (index < 3)
	{
		//float deltaBias = ((1.0 - beta1) * ModifyDeltaWeight(matDeltaBiases5[index], matBiases5[index])) + (beta1 * matMomentum1Biases5[index]);
		//matBiases5[index] += deltaBias * nrcConfig.learningRate;
		//matMomentum1Biases5[index] = deltaBias;
		matBiases5[index] = 0.0;
	}

	if (index < 64)
	{
		float deltaBias = ((1.0 - beta1) * ModifyDeltaWeight(matDeltaBiases0[index], matBiases0[index])) + (beta1 * matMomentum1Biases0[index]);
		matBiases0[index] += deltaBias * nrcConfig.learningRate;
		matMomentum1Biases0[index] = deltaBias;

		deltaBias = ((1.0 - beta1) * ModifyDeltaWeight(matDeltaBiases1[index], matBiases1[index])) + (beta1 * matMomentum1Biases1[index]);
		matBiases1[index] += deltaBias * nrcConfig.learningRate;
		matMomentum1Biases1[index] = deltaBias;

		deltaBias = ((1.0 - beta1) * ModifyDeltaWeight(matDeltaBiases2[index], matBiases2[index])) + (beta1 * matMomentum1Biases2[index]);
		matBiases2[index] += deltaBias * nrcConfig.learningRate;
		matMomentum1Biases2[index] = deltaBias;

		deltaBias = ((1.0 - beta1) * ModifyDeltaWeight(matDeltaBiases3[index], matBiases3[index])) + (beta1 * matMomentum1Biases3[index]);
		matBiases3[index] += deltaBias * nrcConfig.learningRate;
		matMomentum1Biases3[index] = deltaBias;

		deltaBias = ((1.0 - beta1) * ModifyDeltaWeight(matDeltaBiases4[index], matBiases4[index])) + (beta1 * matMomentum1Biases4[index]);
		matBiases4[index] += deltaBias * nrcConfig.learningRate;
		matMomentum1Biases4[index] = deltaBias;
	}
}

void ClearDeltaWeights(const uint index)
{
	if (index < 3)
	{
		matDeltaBiases5[index] = 0.0;
	}

	if (index < 64)
	{
		matDeltaBiases0[index] = 0.0;
		matDeltaBiases1[index] = 0.0;
		matDeltaBiases2[index] = 0.0;
		matDeltaBiases3[index] = 0.0;
		matDeltaBiases4[index] = 0.0;
	}

	if (index < 4096)
	{
		matDeltaWeights0[index] = 0.0;
		matDeltaWeights1[index] = 0.0;
		matDeltaWeights2[index] = 0.0;
		matDeltaWeights3[index] = 0.0;
		matDeltaWeights4[index] = 0.0;
	}

	if (index < 192)
	{
		matDeltaWeights5[index] = 0.0;
	}
}

#include "nvnn.glsl"

void main()
{
	const uint index = gl_GlobalInvocationID.x;

	StepWeights0(index);
	StepWeights1(index);
	StepWeights2(index);
	StepWeights3(index);
	StepWeights4(index);
	StepWeights5(index);
	StepBiases(index);
	ClearDeltaWeights(index);

	if (index == 0)
	{
		testNvnn();
	}
}
